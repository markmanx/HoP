'use strict';


var THREE = require('three');

/**
 *
 * (c) Wensheng Yan <yanwsh@gmail.com>
 * Date: 10/30/16
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

module.exports = (function () {

    var defaults = {
        clickAndDrag: true,
        initFov: 100,
        maxFov: 105,
        minFov: 51,
        initLat: 0,
        initLon: -180,
        returnStepLat: 0.5,
        returnStepLon: 2,
        backToVerticalCenter: false,
        backToHorizonCenter: false,
        clickToToggle: false,
        minLat: -85,
        maxLat: 85,
        minLon: -Infinity,
        maxLon: Infinity,
        rotateX: 0,
        rotateY: 0,
        rotateZ: 0,
        autoMobileOrientation: true,
        mobileVibrationValue: isIos() ? 0.022 : 1,
        closePanorama: false,
        helperCanvas: {},
    }

    function Panorama(settings) {
        this.settings = extend(defaults, settings);
        this.mouseDown = false;
        this.isUserInteracting = false;
        this.lon = this.settings.initLon, this.lat = this.settings.initLat, this.phi = 0, this.theta = 0;
        this.fps = 30;

        // Define three settings
        this.renderer = new THREE.WebGLRenderer({canvas: this.settings.canvasEl});
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.autoClear = false;
        this.renderer.setClearColor(0x000000, 1);
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(this.settings.initFov, window.innerWidth / window.innerHeight, 1, 2000);
        this.camera.target = new THREE.Vector3(0, 0, 0);
        this.geometry = new THREE.SphereGeometry(500, 60, 40);
        this.geometry.scale(-1, 1, 1);
        this.onResize();

        // Set texture
        if (settings.sourceType == 'video') {
            this.texture = new THREE.Texture( this.settings.texSource );
            this.texture.generateMipmaps = false;
            this.texture.minFilter = THREE.LinearFilter;
            this.texture.maxFilter = THREE.LinearFilter;
            this.texture.format = THREE.RGBFormat;
            //this.settings.texSource.style.visibility = 'hidden';
            this.onTextureLoaded();
        } else {
            var loader = new THREE.TextureLoader();
            loader.load( this.settings.texSource, function(texture) {
                this.texture = texture;
                this.onTextureLoaded();
            }.bind(this));
        }
        
        this.attachControlEvents();
    }

    Panorama.prototype.onTextureLoaded = function() {
        this.mesh = new THREE.Mesh(this.geometry, new THREE.MeshBasicMaterial({ map: this.texture }));

        // add hotspots to scene
        if (this.settings.hotspots) {
            var sphereRad = 500;
            this.hotspotGroup = new THREE.Object3D();
            this.hotspots = [];

            for (var i = 0; i < this.settings.hotspots.length; i++) {
                var hotspotData = this.settings.hotspots[i],
                    g = new THREE.SphereGeometry( 20, 32, 32 ),
                    m = new THREE.MeshBasicMaterial( {color: 0xffffff} ),
                    mesh = new THREE.Mesh( g, m ),
                    phi = THREE.Math.degToRad( (360 / this.settings.sourceSize.width) * hotspotData.coords[1] ),
                    theta = THREE.Math.degToRad( 180 - ((180 / this.settings.sourceSize.height) * hotspotData.coords[0]) ),
                    x = -((sphereRad) * Math.sin(phi) * Math.cos(theta)),
                    y = ((sphereRad) * Math.cos(phi)),
                    z = ((sphereRad) * Math.sin(phi) * Math.sin(theta));

                mesh.position.set(x, y, z);
                mesh.visible = false;
                this.hotspots.push(mesh);
                this.hotspotGroup.add(mesh);
            }
        }

        this.scene.add(this.hotspotGroup);
        this.scene.add(this.mesh);
        this.updateHotspots = true;

        this.startRendering();
        this.settings.onReady();

        this.lastFrameRendered = Date.now();
        this.render();
    }

    Panorama.prototype.render = function() {
        requestAnimationFrame(this.render.bind(this));

        if (!this.isRendering) return;

        if (this.settings.sourceType == 'video' && (Date.now() - this.lastFrameRendered) < (1000 / this.fps) ) return;

        if (this.settings.sourceType == 'video') this.texture.needsUpdate = true;

        if (!this.isUserInteracting) {
            var symbolLat = this.lat > this.settings.initLat ? -1 : 1;
            var symbolLon = this.lon > this.settings.initLon ? -1 : 1;
            if (this.settings.backToVerticalCenter) {
                this.lat = this.lat > this.settings.initLat - Math.abs(this.settings.returnStepLat) && this.lat < this.settings.initLat + Math.abs(this.settings.returnStepLat) ? this.settings.initLat : this.lat + this.settings.returnStepLat * symbolLat;
            }
            if (this.settings.backToHorizonCenter) {
                this.lon = this.lon > this.settings.initLon - Math.abs(this.settings.returnStepLon) && this.lon < this.settings.initLon + Math.abs(this.settings.returnStepLon) ? this.settings.initLon : this.lon + this.settings.returnStepLon * symbolLon;
            }
        }

        this.lat = Math.max(this.settings.minLat, Math.min(this.settings.maxLat, this.lat));
        this.lon = Math.max(this.settings.minLon, Math.min(this.settings.maxLon, this.lon));
        this.phi = THREE.Math.degToRad(90 - this.lat);
        this.theta = THREE.Math.degToRad(this.lon);

        this.renderer.clear();
        this.camera.target.x = 500 * Math.sin(this.phi) * Math.cos(this.theta);
        this.camera.target.y = 500 * Math.cos(this.phi);
        this.camera.target.z = 500 * Math.sin(this.phi) * Math.sin(this.theta);
        this.camera.lookAt(this.camera.target);
        this.renderer.render(this.scene, this.camera);

        // Pass back hotspot positions
        if (this.phi !== this.lastPhi || this.theta !== this.lastTheta) this.updateHotspots = true;
        
        if (this.updateHotspots) {
            var e = {phi: this.phi, theta: this.theta, hotspots: []};

            if (this.hotspots) {
                var frustum = new THREE.Frustum(),
                    cameraViewProjectionMatrix = new THREE.Matrix4(),
                    vector = new THREE.Vector3(),
                    widthHalf = 0.5 * this.renderer.context.canvas.width,
                    heightHalf = 0.5 * this.renderer.context.canvas.height;

                this.camera.updateMatrixWorld();
                this.camera.matrixWorldInverse.getInverse( this.camera.matrixWorld );
                cameraViewProjectionMatrix.multiplyMatrices( this.camera.projectionMatrix, this.camera.matrixWorldInverse );
                frustum.setFromMatrix( cameraViewProjectionMatrix );

                for (var i = 0; i < this.hotspots.length; i++) {
                    var hotspot = this.hotspots[i],
                        inView = frustum.intersectsObject(hotspot);

                    // Convert hotspot's 3D coords to 2D coords
                    hotspot.updateMatrixWorld();
                    vector.setFromMatrixPosition(hotspot.matrixWorld);
                    vector.project(this.camera);
                    vector.x = ( vector.x * widthHalf ) + widthHalf;
                    vector.y = - ( vector.y * heightHalf ) + heightHalf;

                    e.hotspots.push({x: vector.x, y: vector.y, inView: inView});
                }
            }
            this.settings.onMove(e);
        }

        this.lastPhi = this.phi;
        this.lastTheta = this.theta;
        this.updateHotspots = false;
        this.lastFrameRendered = Date.now();
    }

    Panorama.prototype.onResize = function() {
        this.width = window.innerWidth, this.height = window.innerHeight;
        this.renderer.setPixelRatio(window.devicePixelRatio || 1);
        this.renderer.setSize(this.width, this.height, false);
        this.camera.aspect = this.width / this.height;
        this.camera.updateProjectionMatrix();
        this.updateHotspots = true;
    }

    Panorama.prototype.startRendering = function() {
        this.isRendering = true;
    }

    Panorama.prototype.stopRendering = function() {
        this.isRendering = false;
    }

    Panorama.prototype.destroy = function() {
        this.isRendering = false;
        this.settings.canvasEl.removeEventListener('mousemove', this.handleMouseMove.bind(this));
        this.settings.canvasEl.removeEventListener('touchmove', this.handleTouchMove.bind(this));
        this.settings.canvasEl.removeEventListener('mousedown', this.handleMouseDown.bind(this));
        this.settings.canvasEl.removeEventListener('touchstart', this.handleTouchStart.bind(this));
        this.settings.canvasEl.removeEventListener('mouseup', this.handleMouseUp.bind(this));
        this.settings.canvasEl.removeEventListener('touchend', this.handleTouchEnd.bind(this));
        this.settings.canvasEl.removeEventListener('mouseenter', this.handleMouseEnter.bind(this));
        this.settings.canvasEl.removeEventListener('mouseleave', this.handleMouseLeave.bind(this));
        if (isMobile()) window.removeEventListener('devicemotion', this.handleMobileOrientation.bind(this));
    }

    Panorama.prototype.attachControlEvents = function() {
        this.settings.canvasEl.addEventListener('mousemove', this.handleMouseMove.bind(this));
        this.settings.canvasEl.addEventListener('touchmove', this.handleTouchMove.bind(this));
        this.settings.canvasEl.addEventListener('mousedown', this.handleMouseDown.bind(this));
        this.settings.canvasEl.addEventListener('touchstart', this.handleTouchStart.bind(this));
        this.settings.canvasEl.addEventListener('mouseup', this.handleMouseUp.bind(this));
        this.settings.canvasEl.addEventListener('touchend', this.handleTouchEnd.bind(this));
        this.settings.canvasEl.addEventListener('mouseenter', this.handleMouseEnter.bind(this));
        this.settings.canvasEl.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
        if (isMobile()) window.addEventListener('devicemotion', this.handleMobileOrientation.bind(this));
    }

    Panorama.prototype.handleMobileOrientation = function(e) {
        if (!this.isRendering) return;

        if (typeof e.rotationRate === "undefined") return;

        var x = e.rotationRate.alpha;
        var y = e.rotationRate.beta;
        var portrait = typeof e.portrait !== "undefined" ? e.portrait : window.matchMedia("(orientation: portrait)").matches;
        var landscape = typeof e.landscape !== "undefined" ? e.landscape : window.matchMedia("(orientation: landscape)").matches;
        var orientation = e.orientation || window.orientation;

        if (portrait) {
            this.lon = this.lon - y * this.settings.mobileVibrationValue;
            this.lat = this.lat + x * this.settings.mobileVibrationValue;
        } else if (landscape) {
            var orientationDegree = -90;
            if (typeof orientation != "undefined") {
                orientationDegree = orientation;
            }

            this.lon = orientationDegree == -90 ? this.lon + x * this.settings.mobileVibrationValue : this.lon - x * this.settings.mobileVibrationValue;
            this.lat = orientationDegree == -90 ? this.lat + y * this.settings.mobileVibrationValue : this.lat - y * this.settings.mobileVibrationValue;
        }
    }

    Panorama.prototype.handleMouseDown = function(e) {
        e.preventDefault();
        var clientX = e.clientX || e.touches && e.touches[0].clientX;
        var clientY = e.clientY || e.touches && e.touches[0].clientY;
        if (typeof clientX === "undefined" || clientY === "undefined") return;
        this.mouseDown = true;
        this.onPointerDownPointerX = clientX;
        this.onPointerDownPointerY = clientY;
        this.onPointerDownLon = this.lon;
        this.onPointerDownLat = this.lat;
    }

    Panorama.prototype.handleMouseUp = function(e) {
        this.mouseDown = false;
        if (this.clickToToggle) {
            var clientX = event.clientX || e.changedTouches && e.changedTouches[0].clientX;
            var clientY = e.clientY || e.changedTouches && e.changedTouches[0].clientY;
            if (typeof clientX === "undefined" || clientY === "undefined") return;
            var diffX = Math.abs(clientX - this.onPointerDownPointerX);
            var diffY = Math.abs(clientY - this.onPointerDownPointerY);
        }
    }

    Panorama.prototype.handleTouchStart = function(e) {
        if (e.touches.length > 1) {
            this.isUserPinch = true;
            this.multiTouchDistance = getTouchesDistance(e.touches);
        }
        this.handleMouseDown(e);
    }

    Panorama.prototype.handleTouchEnd = function(e) {
        this.isUserPinch = false;
        this.handleMouseUp(e);
    }

    Panorama.prototype.handleMouseEnter = function() {
        this.isUserInteracting = true;
    }

    Panorama.prototype.handleMouseLeave = function() {
        this.isUserInteracting = false;
        if (this.mouseDown) {
            this.mouseDown = false;
        }
    }

    Panorama.prototype.handleMouseMove = function(e) {
        var clientX = e.clientX || e.touches && e.touches[0].clientX;
        var clientY = e.clientY || e.touches && e.touches[0].clientY;
        if (typeof clientX === "undefined" || clientY === "undefined") return;
        if (this.settings.clickAndDrag) {
            if (this.mouseDown) {
                this.lon = (this.onPointerDownPointerX - clientX) * 0.2 + this.onPointerDownLon;
                this.lat = (clientY - this.onPointerDownPointerY) * 0.2 + this.onPointerDownLat;
            }
        } else {
            var x = e.pageX - this.el_.offsetLeft;
            var y = e.pageY - this.el_.offsetTop;
            this.lon = x / this.width * 430 - 225;
            this.lat = y / this.height * -180 + 90;
        }
    }

    Panorama.prototype.handleTouchMove = function(e) {
        if (!this.isUserPinch || e.touches.length <= 1) {
            this.handleMouseMove(e);
        }

        if (this.isUserPinch) {
            var currentDistance = getTouchesDistance(e.touches);
            e.wheelDeltaY = (currentDistance - this.multiTouchDistance) * 2;
            this.handleMouseWheel.call(this, e);
            this.multiTouchDistance = currentDistance;
        }
    }

    Panorama.prototype.handleMouseWheel = function(e) {
        if (e.wheelDeltaY) {
            this.camera.fov -= e.wheelDeltaY * 0.05;
            // Opera / Explorer 9
        } else if (e.wheelDelta) {
            this.camera.fov -= e.wheelDelta * 0.05;
            // Firefox
        } else if (e.detail) {
            this.camera.fov += e.detail * 1.0;
        }
        this.camera.fov = Math.min(this.settings.maxFov, this.camera.fov);
        this.camera.fov = Math.max(this.settings.minFov, this.camera.fov);
        this.camera.updateProjectionMatrix();
        this.updateHotspots = true;
    }

    function isIos() {
        return (/iPhone|iPad|iPod/i.test(navigator.userAgent)
        );
    }

    function extend(obj, src) {
        for (var key in src) {
            if (src.hasOwnProperty(key)) obj[key] = src[key];
        }
        return obj;
    }

    function getTouchesDistance(touches) {
        return Math.sqrt((touches[0].clientX - touches[1].clientX) * (touches[0].clientX - touches[1].clientX) + (touches[0].clientY - touches[1].clientY) * (touches[0].clientY - touches[1].clientY));
    }

    function isMobile() {
        var check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    }

    return Panorama;
})();